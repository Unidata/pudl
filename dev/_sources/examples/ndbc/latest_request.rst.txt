
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/ndbc/latest_request.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_ndbc_latest_request.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_ndbc_latest_request.py:


NDBC Latest Data Request
========================

This example shows how to use siphon's `simplewebswervice` support query the most recent
observations from all of the NDBC buoys at once.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default


    import cartopy.crs as ccrs
    import cartopy.feature as cfeature
    import matplotlib.pyplot as plt

    from siphon.simplewebservice.ndbc import NDBC








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Get a pandas data frame of all of the observations

.. GENERATED FROM PYTHON SOURCE LINES 20-23

.. code-block:: default

    df = NDBC.latest_observations()
    df.head()






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>station</th>
          <th>latitude</th>
          <th>longitude</th>
          <th>wind_direction</th>
          <th>wind_speed</th>
          <th>wind_gust</th>
          <th>wave_height</th>
          <th>dominant_wave_period</th>
          <th>average_wave_period</th>
          <th>dominant_wave_direction</th>
          <th>pressure</th>
          <th>3hr_pressure_tendency</th>
          <th>air_temperature</th>
          <th>water_temperature</th>
          <th>dewpoint</th>
          <th>visibility</th>
          <th>water_level_above_mean</th>
          <th>time</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>14041</td>
          <td>-8.00</td>
          <td>55.00</td>
          <td>118.0</td>
          <td>4.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>1009.8</td>
          <td>NaN</td>
          <td>29.3</td>
          <td>29.9</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2021-03-26 17:00:00+00:00</td>
        </tr>
        <tr>
          <th>1</th>
          <td>14047</td>
          <td>-4.00</td>
          <td>57.00</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>26.8</td>
          <td>29.7</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2021-03-26 16:00:00+00:00</td>
        </tr>
        <tr>
          <th>2</th>
          <td>22101</td>
          <td>37.24</td>
          <td>126.02</td>
          <td>110.0</td>
          <td>0.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>4.8</td>
          <td>5.7</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2021-03-26 16:00:00+00:00</td>
        </tr>
        <tr>
          <th>3</th>
          <td>22102</td>
          <td>34.79</td>
          <td>125.78</td>
          <td>140.0</td>
          <td>4.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>9.7</td>
          <td>8.3</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2021-03-26 16:00:00+00:00</td>
        </tr>
        <tr>
          <th>4</th>
          <td>22103</td>
          <td>34.00</td>
          <td>127.50</td>
          <td>140.0</td>
          <td>6.0</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>16.1</td>
          <td>15.1</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>2021-03-26 16:00:00+00:00</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 24-25

In this case I'm going to drop buoys that do not have water temperature measurements.

.. GENERATED FROM PYTHON SOURCE LINES 25-27

.. code-block:: default

    df.dropna(subset=['water_temperature'], inplace=True)








.. GENERATED FROM PYTHON SOURCE LINES 28-29

Let's make a simple plot of the buoy positions and color by water temperature

.. GENERATED FROM PYTHON SOURCE LINES 29-43

.. code-block:: default

    proj = ccrs.LambertConformal(central_latitude=45., central_longitude=-100.,
                                 standard_parallels=[30, 60])

    fig = plt.figure(figsize=(17., 11.))
    ax = plt.axes(projection=proj)
    ax.coastlines('50m', edgecolor='black')
    ax.add_feature(cfeature.OCEAN.with_scale('50m'))
    ax.add_feature(cfeature.LAND.with_scale('50m'))
    ax.set_extent([-85, -75, 25, 30], ccrs.PlateCarree())

    ax.scatter(df['longitude'], df['latitude'], c=df['water_temperature'],
               transform=ccrs.PlateCarree())

    plt.show()



.. image:: /examples/ndbc/images/sphx_glr_latest_request_001.png
    :alt: latest request
    :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.557 seconds)


.. _sphx_glr_download_examples_ndbc_latest_request.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: latest_request.py <latest_request.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: latest_request.ipynb <latest_request.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
